import os
from datetime import timedelta
from datetime import datetime

import telebot

import sqlite3
from telebot import types
from dadata import Dadata

DADATA_KEY = os.environ["Dadata_API_Token"]
TELEGRAM_TOKEN = os.environ["DVM_BOT"]

bot = telebot.TeleBot(TELEGRAM_TOKEN)
dadata = Dadata(DADATA_KEY)
# —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
btn_Check_Compapy = types.InlineKeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ –ò–ù–ù", callback_data="inn")
btn_Calc_Smeta = types.InlineKeyboardButton("üßÆ –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã", callback_data="smeta")
btn_nalg_con = types.InlineKeyboardButton("üíº –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", callback_data="nalcon")
btn_dolj_osm = types.InlineKeyboardButton("üõ°Ô∏è –î–æ–ª–∂–Ω–∞—è –æ—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="dolosm")

# –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
btn_What_Check_inn = types.InlineKeyboardButton("‚ùì –ó–∞—á–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä-–∞–≥–µ–Ω—Ç–æ–≤?", callback_data="whatinn")
btn_What_Smeta = types.InlineKeyboardButton("‚ùì –ó–∞—á–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã?", callback_data="whatsmeta")

btn_tech_support = types.InlineKeyboardButton("üîß It —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ", callback_data="techsupport")

btn_Get_Subscribe_Inline = types.InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="getsubscription")
# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
btn_main_menu = types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
btn_Get_Subscribe = types.KeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

markup_clear_start = types.InlineKeyboardMarkup()
markup_clear_start.row(btn_What_Check_inn)
markup_clear_start.row(btn_What_Smeta)
markup_clear_start.row(btn_Get_Subscribe_Inline)
markup_clear_start.row(btn_tech_support)

markup_clear = types.InlineKeyboardMarkup()
markup_clear.row(btn_What_Check_inn)
markup_clear.row(btn_What_Smeta)
markup_clear.row(btn_tech_support)

markup_subscribe = types.InlineKeyboardMarkup()
markup_subscribe.row(btn_What_Check_inn)
markup_subscribe.row(btn_What_Smeta)
markup_subscribe.row(btn_nalg_con)
markup_subscribe.row(btn_dolj_osm)
markup_subscribe.row(btn_Check_Compapy)
markup_subscribe.row(btn_Calc_Smeta)
markup_subscribe.row(btn_tech_support)

markup_main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_main_menu.add(btn_main_menu, btn_Get_Subscribe)


@bot.message_handler(commands=['start'])
def start(message):
    create_database()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!", reply_markup=markup_main_menu)
    print_select_options(message)


@bot.message_handler(content_types=["text"])
def check_text(message):
    if message.text.lower().strip() == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        check_subscription_period(message.from_user.id, message.chat.id)
        print_select_options(message)
    elif message.text.lower().strip() == "id":
        bot.send_message(message.chat.id, f"{message.from_user.id}")
    elif message.text.lower().strip() == "üí≥ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        subscription(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda callback: True)
def check_commands(callback):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == "getsubscription":
        subscription(callback.from_user.id, callback.message.chat.id)

    elif callback.data == "whatinn":
        bot.send_message(callback.message.chat.id, "‚ùóÔ∏è<u>–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤?</u>‚ùóÔ∏è\n\n"
                                                   "1Ô∏è‚É£ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞</b>\n"
                                                   "–ë–∞–Ω–∫–∏ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫ –†–§ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–π. –ï—Å–ª–∏ –≤–∞—à –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç "
                                                   "–≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–º–Ω–µ–Ω–∏—è —É —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"

                                                   "2Ô∏è‚É£ <b>–°–Ω–∏–∂–µ–Ω–∏–µ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏</b>\n"
                                                   "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã —É–º–µ–Ω—å—à–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±–∞–Ω–∫–∞, —ç–∫–æ–Ω–æ–º—è –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ —Å–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"

                                                   "3Ô∏è‚É£ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤</b>\n"
                                                   "–†–∞–±–æ—Ç–∞ —Å –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤–∫–ª—é—á–µ–Ω–∏—é –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ ¬´—á—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏¬ª –ø–æ 115-–§–ó, —á—Ç–æ –≥—Ä–æ–∑–∏—Ç:\n"
                                                   "\t- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—á–µ—Ç–æ–≤\n"
                                                   "\t- –û—Ç–∫–∞–∑–æ–º –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –±–∞–Ω–∫–∞–º–∏\n"
                                                   "\t- –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –Ω–∞–ª–æ–≥–æ–≤–æ–π\n\n"

                                                   "4Ô∏è‚É£ <b>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</b>\n"
                                                   "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ñ–∏—Ä–º—ã-–æ–¥–Ω–æ–¥–Ω–µ–≤–∫–∏, –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.)",
                         parse_mode="html")

    elif callback.data == "whatsmeta":
        bot.send_message(callback.message.chat.id, """‚ùóÔ∏è<u>–ó–∞—á–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã?</u> ‚ùóÔ∏è

1Ô∏è‚É£ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</b>
–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–æ—Ç–µ—Ä–µ–π –±—é–¥–∂–µ—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ü–µ–ª–æ–º.

2Ô∏è‚É£ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>
–°–º–µ—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–º—ã —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã.

3Ô∏è‚É£ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∏—Å–∫–æ–≤</b>
–†–∞–±–æ—Ç–∞ –±–µ–∑ —á–µ—Ç–∫–æ–π —Å–º–µ—Ç—ã –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º —Ä–∏—Å–∫–∞–º. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–º–µ—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏.

4Ô∏è‚É£ <b>–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ –±–∞–Ω–∫–æ–≤, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.""",
                         parse_mode="html")

    elif callback.data == "techsupport":
        text = "–í—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:"
        with open("./resources/techsupport.jpg", "rb") as photo:
            bot.send_photo(callback.message.chat.id, photo, caption=text)

    elif check_subscription_period(callback.from_user.id, callback.message.chat.id):
        if callback.data == "inn":
            text = "üîç –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
            with open("./resources/buisness1.png", "rb") as photo:
                bot.send_photo(callback.message.chat.id, photo, caption=text)
                bot.register_next_step_handler(callback.message, check_by_inn)

        elif callback.data == "smeta":
            text = "–†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã:"
            with open("./resources/blueprint.jpg", "rb") as photo:
                bot.send_photo(callback.message.chat.id, photo, caption=text)

        elif callback.data == "nalcon":
            text = "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥:"
            with open("./resources/nalcom.jpg", "rb") as photo:
                bot.send_photo(callback.message.chat.id, photo, caption=text)

        elif callback.data == "dolosm":
            text = "–î–æ–ª–∂–Ω–∞—è –æ—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
            with open("./resources/doljosm.jpg", "rb") as photo:
                bot.send_photo(callback.message.chat.id, photo, caption=text)


def print_select_options(message):
    with sqlite3.connect("UsersDB.sqlite") as con:
        cur = con.cursor()
        cur.execute("Select * from users where id = %i" % message.from_user.id)
        users = cur.fetchall()

        if len(users) > 0:
            for user in users:
                subscribe = user[1]
                datetime_purcahase = datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S.%f")
                end_datetime = datetime_purcahase + timedelta(30)

                print(
                    f"user id: {user[0]}\t subscribe: {user[1]}\t purchaise date: {datetime_purcahase}\t end date: {end_datetime}\t now:{datetime.today()}")
                if subscribe == True and datetime_purcahase < end_datetime:
                    send_message(message, markup_subscribe)
                else:
                    send_message(message, markup_clear)
        else:
            send_message(message, markup_clear_start)


def send_message(message, reply_markup):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    with open("./resources/options.jpg", "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption=text, reply_markup=reply_markup)


def check_subscription_period(user_id, chat_id):
    with sqlite3.connect("UsersDB.sqlite") as con:
        cur = con.cursor()
        cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        users = cur.fetchall()

        if len(users) > 0:
            for user in users:
                expire_date = datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S.%f")
                if datetime.today() > expire_date + timedelta(30):
                    markup = types.InlineKeyboardMarkup()
                    markup.add(btn_Get_Subscribe_Inline)
                    cur.execute("Update users set subscribe = ? where id =?", (False, user_id))
                    bot.send_message(chat_id,
                                     f"üíî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞.\nüò¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!",
                                     reply_markup=markup)
                    return False
                else:
                    return True
        else:
            return True


def subscription(user_id, chat_id):
    with sqlite3.connect("UsersDB.sqlite") as con:
        cur = con.cursor()

        cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        users = cur.fetchall()

        if len(users) > 0:
            for user in users:
                if user[1] == True:
                    bot.send_message(chat_id,
                                     f"‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S.%f") + timedelta(30)}")
                    print(f"User: {user_id} –£–ñ–ï –ü–û–î–ü–ò–°–ê–ù")
                else:
                    cur.execute("Update users set subscribe = ?, subscribeData = ? where id =?",
                                (True, datetime.today(), user_id))
                    bot.send_message(chat_id,
                                     f"üîî –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü!\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S.%f") + timedelta(30)}")
                    print(f"User: {user_id} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            cur.execute("Insert into users(id, subscribe,subscribeData) values(?,?,?)",
                        (user_id, True, datetime.today()))
            bot.send_message(chat_id, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü!")
            print(f"User: {user_id} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É")


def check_by_inn(message):
    print(f"User id: {message.from_user.id}\nUser query: {message.text}")
    company = None
    inn = message.text.strip()
    if inn.isupper() or inn.islower() or " " in inn:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ‚ùå")

    else:
        try:
            # –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù —á–µ—Ä–µ–∑ Dadata
            result = dadata.find_by_id("party", query=inn)
            if not result:
                bot.reply_to(message, "‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            company = result[0]
            name = company["value"]
            ogrn = company["data"]["ogrn"]
            status = company["data"]["state"]["status"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á—Ä–µ–¥–∏—Ç–µ–ª—è (–ø—Ä–∏–∑–Ω–∞–∫ —Ä–∏—Å–∫–∞)
            risk = "‚ö†Ô∏è –†–∏—Å–∫–∏: –µ—Å—Ç—å" if "–º–∞—Å—Å–æ–≤—ã–π" in str(company["data"]).lower() else "‚úÖ –†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"

            reply = (
                f"üîç *{name}*\n"
                f"‚Ä¢ –ò–ù–ù: `{inn}`\n"
                f"‚Ä¢ –û–ì–†–ù: `{ogrn}`\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: `{status}`\n"
                f"‚Ä¢ {risk}"
            )
            bot.send_message(message.chat.id, reply, parse_mode="Markdown")

        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")
    print(f"{message.text.strip()}{inn.isupper()} {inn.islower()} {" " in inn}")

    print(company)


def create_database():
    con = sqlite3.connect("UsersDB.sqlite")
    cur = con.cursor()

    cur.execute("CREATE TABLE IF NOT EXISTS users(id int primary key, subscribe boolean, subscribeData timestamp)")
    cur.execute("PRAGMA journal_mode=WAL")
    con.commit()
    cur.close()
    con.close()


bot.polling(none_stop=True)
